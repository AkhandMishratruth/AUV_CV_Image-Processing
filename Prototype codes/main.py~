import numpy as np
import cv2

feed = cv2.VideoCapture(0)
lower_color = np.array([0,0,29])
upper_color = np.array([178,187,100])

minLineLength = 70
maxLineGap = 10

minThresh = 100
maxThresh = 200

kernal_morph = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(3,3))
kernel	=	np.ones((8,8),	np.uint8)
while(1):
    ret, im = feed.read()
    #gray=cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)
    #th=cv2.adaptiveThreshold(gray,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,11,2)
    hsv = cv2.cvtColor(im, cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(hsv,lower_color,upper_color)
    res = cv2.bitwise_and(im,im, mask = mask)
    gray=cv2.cvtColor(res,cv2.COLOR_BGR2GRAY)
    th=cv2.adaptiveThreshold(gray,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,11,2)
    cv2.imshow('asdf',res)
    c=cv2.waitKey(1)
    if c==27:
        cv2.destroyAllWindows()
        break    
    #cv2.destroyAllWindows()

    edge_canny = cv2.Canny(res,minThresh,maxThresh,apertureSize = 3)

    #edge_canny = cv2.morphologyEx(edge_canny,cv2.MORPH_OPEN,kernal_morph)
    #edge_canny=cv2.dilate(edge_canny,kernel,iterations=1)
    #cv2.imshow('asd',edge_canny)
    #c=cv2.waitKey(1)
    #if c==27:
     #   cv2.destroyAllWindows()
       # break


    #lines = cv2.HoughLines(edge_canny,1,np.pi/180,120)
    #for rho,theta in lines[0]:
       # a = np.cos(theta)
      #  b = np.sin(theta)
        #x0 = a*rho
        #y0 = b*rho
        #x1 = int(x0 + 1000*(-b))
       # y1 = int(y0 + 1000*(a))
       # x2 = int(x0 - 1000*(-b))
       # y2 = int(y0 - 1000*(a))
       # cv2.line(im,(x1,y1),(x2,y2),(0,0,255),2)


    lines = cv2.HoughLinesP(edge_canny,1,np.pi/180,100,minLineLength,maxLineGap)
    for x1,y1,x2,y2 in lines[0]:
        if lines!=None:
        	cv2.line(im,(x1,y1),(x2,y2),(0,255,0),2)
    edge_canny = cv2.Canny(res,minThresh,maxThresh,apertureSize = 3)        
    cv2.imshow('asd',edge_canny)
    c=cv2.waitKey(1)
    if c==27:
       cv2.destroyAllWindows()
       break
    
